\name{GOHyperGAll}
\alias{GOHyperGAll}
\alias{GOHyperGAll_Subset}
\alias{GOHyperGAll_Simplify}
\alias{GOCluster_Report}
\alias{readGOorg}
\alias{sampleDFgene2GO}
\alias{gene2GOlist}
\alias{loadData}
\alias{goBarplot}
\title{
	GO term enrichment analysis for large numbers of gene sets 
}
\description{
To test a sample population of genes for over-representation of GO terms, the
core function \code{GOHyperGAll} computes for all nodes in the the three GO networks
(BP, CC and MF) an enrichment test based on the hypergeometric distribution and returns the corresponding raw and
Bonferroni corrected p-values. Subsequently, a filter function supports GO Slim
analyses using default or custom GO Slim categories. Several convenience functions
are provided to process large numbers of gene sets (e.g. clusters from partitioning
results) and to visualize the results. 

Note: \code{GOHyperGAll} provides similar utilities as the \code{GOHyperG}
function in the \code{GOstats} package. The main difference is that
\code{GOHyperGAll} simplifies processing of large numbers of gene sets, as well
as the usage of custom array-to-gene and gene-to-GO mappings.
}
\usage{
## Generate gene-to-GO mappings from file
readGOorg(myfile, outdir, colno, org)

## Obtain gene-to-GO mappings from Bioconductor
sampleDFgene2GO(lib, outdir)

## Generate gene-to-GO-OFFSPRING associations
gene2GOlist(outdir, rootUK = FALSE)

## Load annotations
loadData(outdir)

## Enrichment function
GOHyperGAll(gocat = "MF", sample, Nannot = 2)

## GO slim analysis
GOHyperGAll_Subset(GOHyperGAll_result, sample = test_sample, type = "goSlim", myslimv)

## Reduce GO term redundancy 
GOHyperGAll_Simplify(GOHyperGAll_result, gocat = "MF", cutoff = 0.001, correct = TRUE)

## Batch analysis of many gene sets
GOCluster_Report(setlist, id_type = "affy", method = "all", CLSZ = 10, cutoff = 0.001, gocats = c("MF", "BP", "CC"), myslimv = "default", correct = TRUE, recordSpecGO = NULL, ...)

## Bar plot of GOCluster_Report results
goBarplot(GOBatchResult, gocat)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{myfile}{
	File with gene-to-GO mappings. Sample files can be downloaded from geneontology.org (http://geneontology.org/GO.downloads.annotations.shtml)
}
  \item{outdir}{
	Path to output directory where result data frames/lists will be saved.
}
  \item{colno}{
	Column numbers referencing in \code{myfile} the three target columns containing GOID, GeneID and GOCAT, in that order.
}
  \item{org}{
	Optional argument. Currently, the only valid option is \code{org="Arabidopsis"} to get rid of transcript duplications in this particular annotation. 
}
  \item{lib}{
	If the gene-to-GO mappings are obtained from a \code{*.db} package from Bioconductor then the package name can be specified under the \code{lib} argument of the \code{sampleDFgene2GO} function. 
}
  \item{rootUK}{
	If the argument \code{rootUK} is set to \code{TRUE} then the root nodes are treated as terminal nodes to account for the new unknown terms.
}
  \item{sample}{
	\code{character vector} containing the test set of gene identifiers 
}
  \item{Nannot}{
	Defines the minimum number of direct annotations per GO node from the sample 
        set to determine the number of tested hypotheses for the p-value adjustment.  
}
  \item{gocat}{
	Specifies the GO type. It can be assigned the values "MF", "BP" and "CC". 
}
  \item{GOHyperGAll_result}{
	\code{data.frame} generated by \code{GOHyperGAll}
}
  \item{type}{
	The function \code{GOHyperGAll_Subset} subsets the \code{GOHyperGAll}
	results by directly assigned GO nodes or custom \code{goSlim} categories. 
	The argument \code{type} can be assigned the values \code{goSlim} or \code{assigned}.
}
  \item{myslimv}{
	optional argument to provide custom \code{goSlim} vector
}
  \item{cutoff}{
	p-value cutoff
}
  \item{correct}{
	If \code{TRUE} the function will favor the selection of distal
	(information rich) GO terms that have at the same time a large number of sample
	matches. 
}
  \item{setlist}{
	\code{list} of \code{character vectors} of gene IDs (or array feature IDs). The
	names of the \code{list} components correspond to the set labels, e.g. DEG 
	comparisons or cluster IDs.
}
  \item{id_type}{
	specifies type of IDs in input, can be assigned \code{gene} or \code{affy}
}
  \item{method}{
	Specifies analysis type. Current option are \code{all} for \code{GOHyperGAll}, 
	\code{slim} for \code{GOHyperGAll_Subset} or \code{simplify} for \code{GOHyperGAll_Simplify}.
}
  \item{CLSZ}{
	minimum gene set (cluster) size to consider
}
  \item{gocats}{
	Specifies the GO type, can be assigned the values "MF", "BP" and "CC". 
}
  \item{recordSpecGO}{
	argument to include one specific # GOID in each of the 3 ontologies,
	e.g: \code{recordSpecGO=c("GO:0003674", "GO:0008150", "GO:0005575")} 
}
  \item{GOBatchResult}{
	\code{data.frame} generated by \code{GOCluster_Report}
}
  \item{\dots}{
	additional arguments to pass on
}
}
\details{
	\code{GOHyperGAll_Simplify}: The result data frame from \code{GOHyperGAll}
	will often contain several connected GO terms with significant scores which 
	can complicate the interpretation of large sample sets. To reduce this redundancy,
	the function \code{GOHyperGAll_Simplify} subsets the data frame
	by a user specified p-value cutoff and removes from it all GO nodes with 
        overlapping children sets (OFFSPRING), while the best scoring nodes remain 
        in the data frame.

	\code{GOCluster_Report}: performs the three types of GO term enrichment 
	analyses in batch mode: \code{GOHyperGAll}, \code{GOHyperGAll_Subset} or 
	\code{GOHyperGAll_Simplify}. It processes many gene sets (e.g. gene expression 
        clusters) and returns the results conveniently organized in a single result data frame.
}
\value{
	\code{readGOorg} and \code{sampleDFgene2GO} generate three data frames named \code{GO_MF_DF}, \code{GO_BP_DF} and \code{GO_CC_DF} containing the gene-to-GO mappings for each ontology type. In addition, a fourth data frame \code{go_df} is generated containing the relevant data components for all GO nodes. All four data frames are written to tab-delimited files with the path specified under \code{outdir}.
	
	\code{gene2GOlist} generates the corresponding gene-to-GO-OFFSPRING associations from the three gene-to-GO data frames. All three lists are written to \code{*.Rd} files with the path specified under \code{outdir}.

	\code{GOHyperGAll} returns a \code{data.frame} with results from enrichment test.
}
\references{
The workflow was published in Plant Physiol (2008) 147, 41-57.
}
\author{
Thomas Girke
}
\seealso{
\code{sampleDFgene2GO} 
}
\examples{
\dontrun{
## (A) Input annotations (perform only once for each annotation)

## Generate the required gene-to-GO mappings data frames 'GO_MF_DF'
## 'GO_BP_DF' and 'GO_CC_DF', as well as the lookup table 'go_df'. 
## To work with the following example, download and unzip the data 
## set 'gene_association.tair' from here: 
## http://geneontology.org/GO.downloads.annotations.shtml

readGOorg(myfile="gene_association.tair", outdir="GO", colno = c(5,11,9), org="Arabidopsis")

## Alternatively, the gene-to-GO annotations can be obtained from 
## Bioconductor and then processed as follows:

sampleDFgene2GO(lib="org.At.tair.db", outdir="GO")

## Create corresponding gene-to-GO-OFFSPRING associations and store them
## as lists:

gene2GOlist(outdir="GO", rootUK=TRUE)

## (B) GO term enrichment analysis

## Load go data
loadData(outdir="GO")

## Perform enrichment test on single gene set
test_sample <- unique(as.vector(GO_MF_DF[1:40,2]))
GOHyperGAll(gocat="MF", sample=test_sample, Nannot=2)[1:20,]

## GO Slim analysis by subsetting results accordingly
subset <- GOHyperGAll_Subset(GOHyperGAll_result, sample=test_sample, type="goSlim")
subset[,-8] 

## (C) Reduce GO term redundancy in 'GOHyperGAll_results'
simplifyDF <- GOHyperGAll_Simplify(GOHyperGAll_result, gocat="MF", cutoff=0.001, correct=T)
# Returns the redundancy reduced data set. 
data.frame(GOHyperGAll_result[GOHyperGAll_result[,1] %in% simplifyDF[,1], -8], GO_OL_Match=simplifyDF[,2])

## (D) Batch Analysis of Gene Clusters
GOBatchResult <- GOCluster_Report(setlist=DEGlist, method="all", id_type="gene", CLSZ=10, cutoff=0.001, gocats=c("MF", "BP", "CC"), recordSpecGO=c("GO:0003674", "GO:0008150", "GO:0005575"))
GOBatchResult[1:4, -10]

## (E) Plot 'GOBatchResult' as bar plot
goBarplot(GOBatchResult, gocat="MF")

}
}
\keyword{utilities}
